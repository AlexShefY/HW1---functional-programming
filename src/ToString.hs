{-# LANGUAGE TypeSynonymInstances #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE InstanceSigs #-}
module ToString where

-- В стандартной библиотеке есть класс типов Show
-- (https://hackage.haskell.org/package/base-4.17.0.0/docs/Prelude.html#t:Show).
-- Этот класс типов позволяет преобразовывать значения в строки при помощи функции show.
-- Именно эту функцию использует ghci, когда мы вводим в него выражения.
-- Если выражение обладает типом, который не инстанциирует Show, то его невозможно напечатать.
-- Например, если ввести в ghci "(+) 13", он выдаст ошибку.

-- На класс типов Show есть неформальное ограничение: полученную строку должно быть возможно
-- распарсить обратно в значение при помощи функции read класса типов Read.
-- (https://hackage.haskell.org/package/base-4.17.0.0/docs/Text-Read.html#v:Read)
-- В частности это означает, что все данные, которые содержит данный тип,
-- необходимо отразить в строке-результате применения show.

-- Если мы хотим преобразовать в строку значения типа Person, нам, вероятно, не обязательно
-- печатать все старые фамилии или номер паспорта.
-- Чтобы не нарушать неформальные договоренности, связанные с Read, мы заведем свой
-- класс типов для преобразования чего-то в строки.

class ToString a where
  toString :: a -> String

-- Строка уже является строкой, просто возвращаем ее
instance ToString String where
  toString :: String -> String
  toString = id

-- Числа инстанциируют Show, поэтому пользуемся show
instance ToString Int where
  toString :: Int -> String
  toString = show
